# Generated by Django 5.1.5 on 2025-01-22 06:13

import apps.shared.file_utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('USER', 'User')], default='USER', max_length=5)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user_uuid', models.UUIDField(default=uuid.uuid4)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=apps.shared.file_utils.file_upload_path, validators=[apps.shared.file_utils.validate_one_mb_image_size])),
                ('country', models.CharField(max_length=255, null=True)),
                ('otpauth_url', models.CharField(blank=True, max_length=225, null=True)),
                ('otp_base32', models.CharField(max_length=255, null=True)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='user/qr_code/')),
                ('login_otp', models.CharField(blank=True, max_length=255, null=True)),
                ('login_otp_used', models.BooleanField(default=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('is_connected_to_authenticator', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_first_month', models.BooleanField(default=True)),
                ('subscription_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('registered', 'Registered')], default='registered', max_length=50)),
                ('case_insensitive_username', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('referred_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_referred_by', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('case_insensitive_username'), name='unique_lower_name')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
